{"version":3,"sources":["Image.js","Button.js","Product.js","serviceWorker.js","Final.js","index.js"],"names":["Image","Component","PostData","map","postDetail","index","key","src","img","Product","className","Title","Description","type","name","data-item-id","Id","data-item-price","price","data-item-url","Url","data-item-name","data-item-image","Boolean","window","location","hostname","match","Final","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"44LAuBeA,G,KCpBMC,Y,iLDIb,OACI,6BACcC,EAASC,KAAI,SAACC,EAAYC,GAEhC,OAEI,yBAAKC,IAAKD,GACN,yBAAKE,IAAKH,EAAWI,e,GAT7BP,cEoCDQ,E,iLAhCP,OACI,6BACKP,EAASC,KAAI,SAACC,EAAWC,GACtB,OAEI,yBAAKK,UAAU,OAAOJ,IAAKD,GAE1C,wBAAIK,UAAU,SAAd,+DACmEN,EAAWO,OAC/E,wBAAID,UAAU,eAAc,mDAA5B,+BAC2CN,EAAWQ,aAC1D,yCAAkB,mGAGd,2BAAOC,KAAK,OAAOC,KAAK,aATR,WAaI,4BAASJ,UAAU,+BAA+BK,eAAcX,EAAWY,GACxEC,kBAAiBb,EAAWc,MAC5BC,gBAAef,EAAWgB,IAC1BC,iBAAgBjB,EAAWO,MAC3BW,kBAAiBlB,EAAWI,KAJ/B,wB,GApBNP,a,MCKNsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICEqBC,E,iLATnB,OACI,yBAAKlB,UAAU,aACX,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAPIT,aCApB4B,IAASC,OAAO,kBAAC,EAAD,MAAWC,SAASC,eAAe,SF4H7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f361c4ec.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PostData from './list.json';\r\nimport Button from './Button';\r\n\r\nimport './product.css';\r\nclass Image extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                         {PostData.map((postDetail, index)=>{\r\n                \r\n                    return (\r\n                    \r\n                        <div key={index} >\r\n                            <img src={postDetail.img}></img> \r\n                            </div>\r\n                    );    \r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n \r\nexport default Image;","import React, { Component } from 'react';\r\n\r\nimport './product.css';\r\nclass Button extends Component {\r\n\r\n \r\n    \r\n    state={\r\n        count:0\r\n    };\r\n\r\n    handleClickUp =()=>{\r\n    this.setState((last,{count})=>({\r\n        count:last.count + 1\r\n    }));\r\n}\r\nrender() {\r\n      return(\r\n          \r\n <button onClick={this.handleClickUp}>üëç {this.state.count}</button>\r\n    )} }\r\nexport default Button;","import React, { Component } from 'react';\r\nimport PostData from './list.json';\r\nimport Image from './Image';\r\nimport Button from './Button.js';\r\n\r\nimport './product.css';\r\n\r\n    class Product extends Component {\r\n        render(){\r\n            return(\r\n                <div>\r\n                    {PostData.map((postDetail,index)=>{\r\n                        return(\r\n                          \r\n                            <div className=\"prod\" key={index}>\r\n                                \r\n             <h4 className=\"title\">&nbsp;&nbsp;Title:\r\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {postDetail.Title}</h4>\r\n            <h5 className=\"Description\"><b>&nbsp;&nbsp;Description: \r\n        </b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{postDetail.Description}</h5>\r\n        <form>&nbsp;&nbsp;<label>\r\n            Review: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n            <input type=\"text\" name=\"review\"></input></label></form>\r\n                                \r\n                                &nbsp;&nbsp;\r\n                               \r\n                                <button  className=\"buy-button snipcart-add-item\" data-item-id={postDetail.Id} \r\n                                   data-item-price={postDetail.price} \r\n                                   data-item-url={postDetail.Url} \r\n                                   data-item-name={postDetail.Title} \r\n                                   data-item-image={postDetail.img}>Add to cart</button>                                                         \r\n                                </div>\r\n                        )\r\n\r\n                    })}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n    \r\n    export default Product;\r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //    data-item-custom1-name=\"Frame color\"\r\n                                //    data-item-custom1-options=\"Black|Brown[+100.00]|Gold[+300.00]\"","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\r\nimport PostData from './list.json';\r\nimport Image from './Image';\r\nimport Button from './Button.js';\r\nimport Product from './Product';\r\nimport './product.css';\r\n\r\nclass Final extends Component{\r\n    \r\n    render() {\r\n        \r\n        return (\r\n            <div className=\"container\">\r\n                <Image/> \r\n                <Product/>\r\n            </div>\r\n           \r\n            \r\n            )}\r\n        }\r\n            export default Final;\r\n\r\n            \r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Final from './Final';\nimport Product from './Product';\nReactDOM.render(<Final />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}